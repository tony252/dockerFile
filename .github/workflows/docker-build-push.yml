name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX=$(cat .github/docker-images.json | jq -c '{include: .images}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Read image config
        id: read_config
        run: echo "config=$(cat .github/docker-images.json | jq -c)" >> $GITHUB_OUTPUT
        
      - name: Build images
        run: |
          # 检查Dockerfile是否存在
          if [ ! -f "${{ matrix.dockerfile }}" ]; then
            echo "错误: Dockerfile不存在: ${{ matrix.dockerfile }}"
            exit 1
          fi
          
          echo "开始构建镜像: ${{ matrix.name }}:${{ matrix.tag }}"
          # 构建Docker镜像
          docker build -t ${{ matrix.name }}:${{ matrix.tag }} -f ${{ matrix.dockerfile }} .
          
          # 检查构建结果
          if [ $? -ne 0 ]; then
            echo "错误: 镜像构建失败"
            exit 1
          fi
          
          echo "镜像构建成功，检查镜像是否存在"
          # 验证镜像是否存在
          docker images | grep "${{ matrix.name }}" | grep "${{ matrix.tag }}"
          
          echo "开始保存镜像为tar文件"
          # 将镜像保存为tar文件
          docker save ${{ matrix.name }}:${{ matrix.tag }} > /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          
          # 检查保存结果
          if [ $? -ne 0 ]; then
            echo "错误: 保存镜像失败"
            exit 1
          fi
          
          echo "检查tar文件是否存在"
          # 验证tar文件是否存在
          ls -la /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          
          echo "镜像构建和保存完成"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}_${{ matrix.tag }}
          path: /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          overwrite: true
          if-no-files-found: error  # 如果找不到文件则报错
          retention-days: 1 
          
#  push-to-dockerhub:
#    needs: [prepare, build]
#    runs-on: ubuntu-latest
#    strategy:
#      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
#    steps:
#      - name: Download image artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ matrix.name }}_${{ matrix.tag }}
#          path: /tmp
#
#      - name: Load Docker image
#        run: |
#          ls -la /tmp
#          docker load --input /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
#          docker tag ${{ matrix.name }}:${{ matrix.tag }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.tag }}
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          registry: docker.io
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#
#      - name: Push to DockerHub
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.tag }}

  push-to-aliyun:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.name }}_${{ matrix.tag }}
          path: /tmp
          
      - name: Load Docker image
        run: |
          ls -la /tmp
          docker load --input /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          docker tag ${{ matrix.name }}:${{ matrix.tag }} registry.cn-hangzhou.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACE }}/${{ matrix.name }}:${{ matrix.tag }}

      - name: Login to Aliyun Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Push to Aliyun
        run: docker push registry.cn-hangzhou.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACE }}/${{ matrix.name }}:${{ matrix.tag }} 